iv='7380166f4914b2b9172442d7da8a0600a96f30bc163138aae38dee4db0fb0e4e'
import math;#需要利用这个里面的向上取整函数
def T(j):
    if j<16:
        return 0x79cc4519
    else:
        return 0x7a879d8a
#根据j的大小选择常量
def Yiwei(x,TT):
    x='{:032b}'.format(x)
    s=TT%32
    x=x[s:]+x[:s]
    return int(x,2)
#左移位函数，移位位数为TT
def ff(x,y,z,j):
    if j<16:
        return x^y^z
    return (x&y)|(y&z)|(z&x)
#布尔函数FF
def gg(x,y,z,j):
    if j<16:
        return x^y^z
    return (x&y)|(~x&z)
#布尔函数GG
def p0(x):
    return x^Yiwei(x, 9)^Yiwei(x, 17)
def p1(x):
    return x^Yiwei(x, 15)^Yiwei(x, 23)
#置换函数p0，p1
def tianchong(m):
    l=len(m)*4
    m=m+'8'
    k=112-(len(m)%128)
    m=m+'0'*k+'{:016x}'.format(l)
    return m
#填充函数
def fenzu(m):
    n=len(m)//128
    b=[]
    for i in range(n):
        b.append(m[i*128:(i+1)*128])
    return b
#分组函数
def kuozhan(bi):
    w=[]
    for i in range(16):
        w.append(int(bi[i*8:(i+1)*8],16))
    for j in range(16,68):
        w.append(p1(w[j-16]^w[j-9]^Yiwei(w[j-3], 15))^Yiwei(w[j-13], 7)^w[j-6])
    for j in range(68,132):
        w.append(w[j-68]^w[j-64])
    return w
#消息扩展函数
def cf(vi,bi):
    w=kuozhan(bi)
    a,b,c,d,e,f,g,h=int(vi[0:8],16),int(vi[8:16],16),int(vi[16:24],16),int(vi[24:32],16),int(vi[32:40],16),int(vi[40:48],16),int(vi[48:56],16),int(vi[56:64],16)
    for j in range(64):
        ss1=Yiwei((Yiwei(a,12)+e+Yiwei(T(j),j))%pow(2,32),7)
        ss2=ss1^Yiwei(a,12)
        tt1=(ff(a,b,c,j)+d+ss2+w[j+68])%pow(2,32)
        tt2=(gg(e,f,g,j)+h+ss1+w[j])%pow(2,32)
        d=c
        c=Yiwei(b,9)
        b=a
        a=tt1
        h=g
        g=Yiwei(f,19)
        f=e
        e=p0(tt2)
    abcdefgh=int('{:08x}'.format(a)+'{:08x}'.format(b)+'{:08x}'.format(c)+'{:08x}'.format(d)+'{:08x}'.format(e)+'{:08x}'.format(f)+'{:08x}'.format(g)+'{:08x}'.format(h),16)
    return '{:064x}'.format(abcdefgh^int(vi,16))
#压缩函数
def diedai(b):
    n=len(b)
    v=iv
    for i in range(n):
        v=cf(v,b[i])
    return v
#迭代压缩函数
def hash(m):#m为16进制串
    m=tianchong(m)
    b=fenzu(m)
    return diedai(b)
#以上为sm3中的hash函数算法

def modf(m,n,p): #辗转相除法计算分数模运算
    a = [0] * 1000  
    b = [0] * 1000
    
    a[0] = p
    b[0] = n

    i = 0
    while (a[i] % b[i]):
        a[i + 1] = b[i]
        b[i + 1] = a[i] % b[i]
        i += 1

    i -= 1
    shang_a = 1
    shang_b = -(a[i] // b[i])
    while (i != -1):
        if (i >= 1):
            tmp = shang_a
            shang_a = shang_b
            shang_b = tmp - a[i - 1] // b[i - 1] * shang_b

        i -= 1
    if n>0:
        return (shang_b % a[0])*m%p
    else:
        return p-(shang_b % a[0])*m%p
def Add(x1,y1,x2,y2,a,p):  #将两个点相加的函数，返回值分别为结果的横纵坐标
    if x1==x2 and y1==-y2:
        return False
    if x1!=x2:
        t=modf((y2-y1),(x2-x1), p)
    else:
        t=modf((3*x1*x1+a),2*y1, p)
    x3=(t*t-x1-x2)%p
    y3=(t*(x1-x3)-y1)%p
    return x3,y3 
def sumpoint(x,y,k,a,p):  #计算一个整数与一个点相乘的函数
    X,Y=x,y
    hh=bin(k)[2:]
    hhh=len(hh)
    for i in range(1,hhh):
        X,Y=Add(X, Y, X, Y, a, p)
        if hh[i]=='1':
            X,Y=Add(X,Y,x,y, a, p)
    return X,Y
def kdf(z,klen): #kdf操作函数
    CT=1
    hh=''
    for _ in range(math.ceil(klen/256)):  #ceil向上取整函数
        hh=hh+hash(hex(int(z+'{:032b}'.format(CT),2))[2:])#把CT转化为二进制字符串并于z拼接后带入hash函数中，将返回的结果拼接到hh上
        CT=CT+1
    hh='0'*((256-(len(bin(int(hh,16))[2:])%256))%256)+bin(int(hh,16))[2:]#补充使用bin函数时可能造成的字符串开头的'0'的缺失
    hh=hh[:klen]  #只取hh的前klen位作为返回值，这样保证整个杂凑值的长度等于klen
    return hh   #返回值为二进制字符串
def yihuo(aa,bb): #对两个相同长度的二进制字符串，按位做异或的函数，异或结果作为返回值
    h=''
    for i in range(1,len(aa)+1):
        if aa[i-1]==bb[i-1]:
            h=h+'0'
        else:
            h=h+'1'
    return h

#数据常量
p=0x8542D69E4C044F18E8B92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3  
a=0x787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498
b=0x63E4C6D3B23B0C849CF84241484BFE48F61D59A5B16BA06E6E12D1DA27C5249A
h=1
gx=0x421DEBD61B62EAB6746434EBC3CC315E32220B3BADD50BDC4C4E6C147FEDD43D
gy=0x0680512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2
n=0x8542D69E4C044F18E8B92435BF6FF7DD297720630485628D5AE74EE7C32E79B7
k=0x4C62EEFD6ECFC2B95B92FD6C3D9575148AFA17425546D49018E5388D49DD7B4F 
M=0x656E6372797074696F6E207374616E64617264 #待加密的明文（十六进制）
print("待加密的明文:",hex(M)[2:])
lenM=len(hex(M)[2:])*4#计算得出明文的比特长度
M='0'*(lenM-len(bin(M)[2:]))+bin(M)[2:] #将十六进制字符串表示的明文转化成二进制字符串
x1,y1=sumpoint(gx,gy,k,a,p)  #计算点C1的横纵坐标C1=kG
C1='04'+hex(x1)[2:]+hex(y1)[2:]  #计算用于生成密文的C1
x11,y11='{:0256b}'.format(x1),'{:0256b}'.format(12)  
c1='0100'+x11+y11;#将C1的横纵坐标转化为二进制字符串
dB=0x1649AB77A00637BD5E2EFE283FBF353534AA7F7CB89463F208DDBC2920BB0DA0#接收者B的私钥
xB,yB=sumpoint(gx,gy,dB,a,p)#接收者B的公钥
x2,y2=sumpoint(xB,yB,k,a,p)#密文发送者利用B的公钥计算椭圆曲线点kPB
x22,y22='{:0256b}'.format(x2),'{:0256b}'.format(y2)#x2，y2的二进制字符串表示
tt=kdf(x22+y22,lenM) 
c2=yihuo(M,tt) #C2的二进制字符串表示
C2=hex(int(c2,2));#C2的十六进制字符串表示
C3=hash(str(hex(int((x22+M+y22),2)))[2:])#C3的十六进制字符串表示
c3=bin(int(C3,16))#C3的二进制字符串表示
C=C1+C2+C3      #密文的十六进制字符串表达，拼接C1，C2，C3
c=c1+c2+c3      #密文的二进制字符串表达
print("输出密文：",C)
#以上为加密过程，以下为解密过程

x2,y2=sumpoint(x1,y1,dB,a,p)
x22,y22='{:0256b}'.format(x2),'{:0256b}'.format(y2)
ttt=kdf(x22+y22,lenM)
M1=int(yihuo(c2,ttt),2)
MM=hex(int(yihuo(c2,ttt),2))[2:] #MM即为解出的明文
print("输出解密后的明文：",MM)
M1='0'*(lenM-len(bin(M1)[2:]))+bin(M1)[2:]##MM的二进制字符串表示
u=hash(str(hex(int((x22+M1+y22),2)))[2:]) #计算得出u
if u==C3:
    print("解密成功") #判断u是否等于C3若相等则打印解秘成功
else :
    print("解密失败")
